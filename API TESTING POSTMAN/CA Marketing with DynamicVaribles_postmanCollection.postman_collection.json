{
	"info": {
		"_postman_id": "b19fea0c-fa44-40fe-b18b-10062d4620b5",
		"name": "CA Marketing with DynamicVaribles_postmanCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17135790"
	},
	"item": [
		{
			"name": "POST addresses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear();",
							"",
							"// pm.environment.unset(\"ID\");",
							"// pm.environment.unset(\"company\");",
							"// pm.environment.unset(\"zipCode\");",
							"// pm.environment.unset(\"addressLine1\");",
							"// pm.environment.unset(\"addressLine2\");",
							"// pm.environment.unset(\"firstName\");",
							"// pm.environment.unset(\"lastName\");",
							"// pm.environment.unset(\"city\");",
							"// pm.environment.unset(\"country\");",
							"// pm.environment.unset(\"phoneNumber\");",
							"// pm.environment.unset(\"subdivision\");",
							"",
							"//returns a random integer from 10000 to 90000 with 5 digits ",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);",
							"",
							"//returns a random integer from 100 to 900 with 3 digits",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);",
							"",
							"const stateAbbreviations = [",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',",
							" 'VT','VI','VA','WA','WV','WI','WY'",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"subdivision\", randomState);",
							"",
							"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
							"",
							"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
							"",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
							"pm.environment.set(\"lastName\", lName);",
							"",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"company\", co);",
							"",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"addressLine1\", addrLn1);",
							"",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"city\", cty);",
							"",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"country\", cntry);",
							"",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"phoneNumber\", phoneNum);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"ID\", jsonData.id);",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"// use the `pm.*` API to write your test",
							"// the `pm.test()` method accepts 2 parameters",
							"// the first parameter is the name of your test (be descriptive)",
							"// the second parameter is a function whereby if any assertions within your function fail, then the test will fail",
							"",
							"pm.test(\"Name of the first test\", function () {",
							"    // make an assertion",
							"    // if your assertion throws an error, this test will fail",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Name of the second test\", function () {",
							"    // make as many assertions as you'd like as part of this test",
							"    // if any assertion throws an error, this test will fail",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"//tests['Response latency is acceptable'] = responseTime < 1000;",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"/*",
							"if(responseBody.has(\"Success\")) //or any other success condition",
							"{",
							"    postman.setNextRequest('Continue Processing');",
							"    tests[\"Success found\"] = true;",
							"}",
							"else",
							"{",
							"    postman.setNextRequest('Delay For 10 Seconds');",
							"    tests[\"No success found\"] = true;",
							"}",
							"*/",
							"/*",
							"pm.test(\"Returns 15 char alhpanumeric id\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.form.secondHash).to.match(/^[a-z0-9]{36}$/);",
							"});",
							"*/",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"address\": {\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{firstName}}\",\r\n\t\t\t\"lastName\": \"{{lastName}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{company}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"{{addressLine1}}\",\r\n\t\t\"addressLine2\": \"{{addressLine2}}\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"{{city}}\",\r\n\t\t\"country\": \"{{country}}\",\r\n\t\t\"subdivision\": \"{{subdivision}}\",\r\n\t\t\"zipCode\": \"{{zipCode}}\",\r\n\t\t\"phoneNumber\": \"{{phoneNumber}}\"\r\n\t},\r\n\t\"setAsDefault\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST_Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"});\r",
							"\r",
							"pm.test(\"Address has been updated, OK\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Authorization",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36"
					},
					{
						"key": "Content-Type",
						"value": "application/json;charset=UTF-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}"
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response time is less than 10KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"pm.test(\"ID is correct\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Entire response is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));",
							"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));",
							"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.address).to.be.a('object');",
							"    pm.expect(jsonResponse.address.id).to.be.a('string');",
							"    pm.expect(jsonResponse.address.fullName).to.be.a('object');",
							"    pm.expect(jsonResponse.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonResponse.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonResponse.address.country).to.be.a('string');",
							"    pm.expect(jsonResponse.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonResponse.address.city).to.be.a('string');",
							"    pm.expect(jsonResponse.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonResponse.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonResponse.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonResponse.address.addressLine2).to.be.a('string');",
							"    pm.expect(jsonResponse.isDefaultAddress).to.be.a('boolean');",
							"});",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"company\", \"Google-\" + new Date().getTime())",
							"",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000)",
							"",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100)",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"pm.test(\"Address has been updated, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "company",
						"type": "text",
						"value": "{{$randomCompanyName}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"address\": {\r\n\t\t\"id\": \"{{ID}}\",\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{firstName}}\",\r\n\t\t\t\"lastName\": \"{{lastName}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{company}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"{{addressLine1}}\",\r\n\t\t\"addressLine2\": \"{{addressLine2}}\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"{{city}}\",\r\n\t\t\"country\": \"{{country}}\",\r\n\t\t\"subdivision\": \"{{subdivision}}\",\r\n\t\t\"zipCode\": \"{{zipCode}}\",\r\n\t\t\"phoneNumber\": \"{{phoneNumber}}\"\r\n\t},\r\n\t\"setAsDefault\": false,\r\n\t\"fieldMask\": {\r\n\t\t\"paths\": [\"fullName.firstName\", \"fullName.lastName\", \"company\", \"addressLine1\", \"addressLine2\", \"city\", \"country\", \"subdivision\", \"zipCode\", \"phoneNumber\", \"setAsDefault\"]\r\n\t}\r\n}"
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Updated addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"//Access by text filter",
							"pm.test(\"company is Google\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"company\", pm.environment.get(\"company\"));",
							"});",
							"",
							"",
							"//Access by JSON parse",
							"// pm.test(\"Company is current\", function () {",
							"//     var jsonData = JSON.parse(responseBody);",
							"//     jsonData.company === (pm.environment.get(\"company\"));",
							"// });",
							"",
							"// Check changed values",
							"pm.test(\"Check Company, ZipCode and AddressLine2\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));",
							"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"/*",
							"pm.test(\"Company is correct again\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"});",
							"*/",
							"",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.address).to.be.a('object');",
							"    pm.expect(jsonResponse.address.id).to.be.a('string');",
							"    pm.expect(jsonResponse.address.fullName).to.be.a('object');",
							"    pm.expect(jsonResponse.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonResponse.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonResponse.address.country).to.be.a('string');",
							"    pm.expect(jsonResponse.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonResponse.address.city).to.be.a('string');",
							"    pm.expect(jsonResponse.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonResponse.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonResponse.address.company).to.be.a('string');",
							"    pm.expect(jsonResponse.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonResponse.isDefaultAddress).to.be.a('boolean');",
							"});",
							"",
							"pm.test(\"Entire response is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));",
							"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));",
							"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response Size is less than 1000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.an('object');",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address 2nd time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = true;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = true;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Bad Request\"] = true;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = true;",
							"}",
							"",
							"pm.test(\"Status code is 400, as expected\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response Size is less than 1000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\",\"191\");",
							"    pm.response.to.have.header(\"Connection\",\"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.an('object');",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"pm.test(\"Message is include previously deleted ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
							"});",
							"pm.test(\"Message details ID is correct\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "wTdJTl3WSME9B9VaWaOsUieVM6BWuQAJuSYSbUzz2PA.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA3LTA0VDE2OjQ5OjU2LjczM1oiLCJ1aWQiOiIwMzIxMGM0MS1hYjc4LTQ2MzctOGU2Yi01MWVmNmRmN2I5MTMiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjdkMzJlNzExLTNlYjItNDI4Mi05OTIwLWFkNjZiZmQ1Y2EwNyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNy0wNFQyMDo0OTo1Ni43MzNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}